#version 450

layout (constant_id = 0) const int kernel_w = 3;
layout (constant_id = 1) const int kernel_h = 3;
layout (constant_id = 2) const int bias_term = 0;

layout (local_size_x_id = 233) in;
layout (local_size_y_id = 234) in;
layout (local_size_z_id = 235) in;

layout (binding = 0) buffer bottom_blob { float bottom_top_blob_data[]; };
layout (binding = 1) readonly buffer weight_blob { float weight_data[]; };
layout (binding = 2) readonly buffer bias_blob { float bias_data[]; };

layout (push_constant) uniform parameter
{
    int dims;
    int w;
    int h;
    int c;
    int cstep;
} p;

void main()
{
    int gx = int(min( max(gl_GlobalInvocationID.x, 1), p.w - 1) );
    int gy = int(min( max(gl_GlobalInvocationID.y, 1), p.h - 1) );
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.w || gy >= p.h || gz >= p.c)
        return;

    float sum = 0.f;
    if(bias_term == 1) {
        sum = bias_data[gz];
    }

    // image format is HWC
    int v_offset = (gy - 1) * p.w * p.c + (gx - 1) * p.c + gz;
    int w_offset = 0;
    for(int y=0;y<kernel_h;++y) {
        for(int x=0;x<kernel_w;++x) {
            sum += (weight_data[w_offset + x] * bottom_top_blob_data[v_offset + x * p.c]);
        }
        v_offset += p.w * p.c;
        w_offset += kernel_w;
    }

    bottom_top_blob_data[gy * p.w * p.c + gx * p.c + gz] = max(0.f, min(sum, 255.0f));
}
